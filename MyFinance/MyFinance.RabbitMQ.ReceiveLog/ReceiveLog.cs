using System;
using System.Text;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

namespace MyFinance.RabbitMQ.ReceiveLog
{
    class ReceiveLog
    {
        public static void Main()
        {
            var factory = new ConnectionFactory() { HostName = "localhost" };
            using (var connection = factory.CreateConnection())
            using (var channel = connection.CreateModel())
            {
				channel.ExchangeDeclare(exchange: "logs", type: ExchangeType.Fanout);
				
				// Create a non-durable, exclusive, autodelete queue with a autogenerated name
                var queueName = channel.QueueDeclare().QueueName;

				// Bind queue to exchange
                channel.QueueBind(queue: queueName, exchange: "logs", routingKey: "");

                Console.WriteLine(" [*] Waiting for logs.");

                var consumer = new EventingBasicConsumer(channel);
                consumer.Received += (model, args) =>
                {
                    var body = args.Body.ToArray();
                    var message = Encoding.UTF8.GetString(body);
                    Console.WriteLine(" [x] {0}", message);

                    // Manual acknowledge delivered message(s)
                    channel.BasicAck(deliveryTag: args.DeliveryTag, multiple: false);
                };

				// Using autoack mode - there is no matter to miss some messages via processing errors
                channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);

                Console.WriteLine(" Press [enter] to exit.");
                Console.ReadLine();
            }
        }
    }
}
